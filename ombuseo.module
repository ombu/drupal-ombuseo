<?php

/**
 * @file
 *
 * Provides custom title and meta tags for node pages.
 */

/****
 * HOOKS
 */

/**
 * Implements hook_menu().
 */
function ombuseo_menu() {
  $items = array();

  $items['admin/config/search/ombuseo'] = array(
    'title' => 'OMBU SEO Settings',
    'description' => 'Configure per node type SEO settings.',
    'access arguments' => array('configure ombuseo'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ombuseo_settings_form'),
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function ombuseo_menu_alter(&$callbacks) {
  // Iterate over views
  foreach (variable_get('ombuseo_views', array()) as $object_id) {
    if ($object_id) {
      list($view, $display_id) = explode('::', $object_id);
      $view = views_get_view($view);
      $router = $view->execute_hook_menu($display_id, $callbacks);
      foreach ($router as $path => $item) {
        $callbacks[$path . '/view'] = array(
          'title' => 'View',
          'type' => MENU_DEFAULT_LOCAL_TASK,
          'weight' => -5
        );
        $callbacks[$path . '/ombuseo'] = array(
          'title' => 'SEO',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('ombuseo_metadata_form', 'view', $object_id, TRUE),
          'access arguments' => array('edit ombuseo fields'),
          'type' => MENU_LOCAL_TASK
        );
      }
    }
  }

  // Iterate over all callbacks and match path.
  foreach ($callbacks as $path => $router) {
    $pattern = variable_get('ombuseo_path', '');
    if (drupal_match_path($path, $pattern)) {
      $callbacks[$path . '/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -5
      );
      $callbacks[$path . '/ombuseo'] = array(
        'title' => 'SEO',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ombuseo_metadata_form', 'path', NULL, TRUE),
        'access arguments' => array('edit ombuseo fields'),
        'type' => MENU_LOCAL_TASK
      );
    }
  }
}

/**
 * Implements hook_admin_paths().
 */
function ombuseo_admin_paths() {
  return array(
    '*/ombuseo' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function ombuseo_permission() {
  return array(
    'configure ombuseo' => array(
      'title' => t('Configure OmbuSEO'),
    ),
    'edit ombuseo fields' => array(
      'title' => t('Edit OmbuSEO fields'),
    ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ombuseo_form_node_form_alter(&$form, $form_state) {
  if (user_access('edit ombuseo fields') && in_array($form['type']['#value'], variable_get('ombuseo_node_types', array()), TRUE)) {
    $form['actions']['submit']['#submit'][] = 'ombuseo_metadata_form_submit';
    $form += ombuseo_metadata_form($form, $form_state, 'node', $form['nid']['#value']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function ombuseo_form_taxonomy_form_term_alter(&$form, $form_state) {
  if (user_access('edit ombuseo fields') && in_array($form['vocabulary_machine_name']['#value'], variable_get('ombuseo_taxonomy_vocabs', array()), TRUE)) {
    $form['#submit'][] = 'ombuseo_metadata_form_submit';
    $form += ombuseo_metadata_form($form, $form_state, 'taxonomy_term', $form['tid']['#value']);
  }
}

/**
 * Form callback for ombuseo metadata form.
 *
 * This function can be used in a hook_form_alter by passing $form by reference,
 * and providing the $type and $id params as well.
 *
 * @param $form
 *   A form array that is altered if present.
 * @param $form_state
 *   Form state array.
 * @param $type
 *   The
 * @param $id
 */
function ombuseo_metadata_form($form, $form_state, $type, $id, $system_form = FALSE) {
  if ($type == 'path' && $id == NULL) {
    $path = current_path();
    if (substr($path, -8) === '/ombuseo') {
      $path = str_replace('/ombuseo', '', $path);
    }
    $id = $path;
  }
  // Add page arguments if this is a view.
  if ($type == 'view') {
    list($view, $display_id) = explode('::', $id);
    $view = views_get_view($view);
    $arguments = ombuseo_get_view_arguments($view, $display_id);
    $id = $id . '::' . implode('::', $arguments);
  }

  $ombuseo = ombuseo_load($type, $id);

  if ($system_form) {
    drupal_set_title(t('SEO settings'));
    $form['ombuseo'] = array(
      '#tree' => TRUE,
    );
  }
  else {
    $form['ombuseo'] = array(
      '#type' => 'fieldset',
      '#title' => 'SEO',
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
      '#tree' => TRUE,
      '#group' => 'additional_settings',
      '#weight' => 50,
      '#attributes' => array(
        'class' => array('ombuseo-settings-form'),
      ),
    );
  }

  $form['ombuseo']['type'] = array(
    '#type' => 'value',
    '#value' => $type,
  );
  $form['ombuseo']['id'] = array(
    '#type' => 'value',
    '#value' => $id,
  );

  $form['ombuseo']['meta_title'] = array(
    '#title' => 'Alternate Page Title',
    '#description' => 'The alternate title is only used in the HTML &lt;title&gt; tag. If not set, the regular title will be used.',
    '#type' => 'textfield',
    '#default_value' => $ombuseo->meta_title,
  );
  $form['ombuseo']['meta_description'] = array(
    '#title' => 'Meta Description',
    '#description' => 'Enter the meta description for this content.',
    '#type' => 'textarea',
    '#default_value' => $ombuseo->meta_description,
  );
  $form['ombuseo']['meta_keywords'] = array(
    '#title' => 'Meta Keywords',
    '#description' => 'Comma-separated list of meta keywords such as: blue, smurf, sky.',
    '#type' => 'textarea',
    '#default_value' => $ombuseo->meta_keywords,
  );

  if ($system_form) {
    $form['#submit'][] = 'ombuseo_metadata_form_submit';
    $form['ombuseo']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save changes'),
    );
    return $form;
  }
  else {
    return $form;
  }
}

/**
 * Submit handler for ombuseo_metadata_form().
 */
function ombuseo_metadata_form_submit($form, &$form_state) {
  // Attempt to set target id if not set.
  if (!$form_state['values']['ombuseo']['id']) {
    switch ($form_state['values']['ombuseo']['type']) {
      case 'node':
        $form_state['values']['ombuseo']['id'] = $form_state['nid'];
        break;

      case 'taxonomy_term':
        $form_state['values']['ombuseo']['id'] = $form_state['tid'];
        break;
    }
  }
  ombuseo_save((object) $form_state['values']['ombuseo']);
}

/**
 * Returns the seo settings object for the current page.
 */
function ombuseo_get_current_seo() {
  $ombuseo = &drupal_static(__FUNCTION__);

  if (!isset($ombuseo)) {
    // Try the various types of entities
    if (drupal_match_path(current_path(), variable_get('ombuseo_path', ''))) {
      $ombuseo = ombuseo_load('path', current_path());
    }
    elseif (($node = menu_get_object()) && in_array($node->type, variable_get('ombuseo_node_types', array()), TRUE)) {
      $ombuseo = ombuseo_load('node', $node->nid);
    }
    elseif (($term = menu_get_object('taxonomy_term', 2)) && in_array($term->vocabulary_machine_name, variable_get('ombuseo_taxonomy_vocabs', array()), TRUE)) {
      $ombuseo = ombuseo_load('taxonomy_term', $term->tid);
    }
    elseif (($item = menu_get_item()) && $item['page_callback'] == 'views_page' &&
      in_array($item['page_arguments'][0] . '::' . $item['page_arguments'][1], variable_get('ombuseo_views', array()), TRUE)) {
      $view = views_get_view($item['page_arguments'][0], $item['page_arguments'][1]);
      $arguments = ombuseo_get_view_arguments($view, $item['page_arguments'][1]);
      $ombuseo = ombuseo_load('view', $item['page_arguments'][0] . '::' . $item['page_arguments'][1] . '::' . join('::', $arguments));
    }
  }

  return $ombuseo;
}

/**
 * Implements hook_node_delete().
 */
function ombuseo_node_delete($node) {
  if (ombuseo_load('node', $node->nid)) {
    ombuseo_delete('node', $node->nid);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function ombuseo_preprocess_page(&$variables) {
  $ombuseo = ombuseo_get_current_seo();

  if (isset($ombuseo)) {
    if (!empty($ombuseo->meta_description)) {
      $meta_description = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'description',
          'content' => $ombuseo->meta_description,
        ),
      );
      drupal_add_html_head($meta_description, 'meta_description');
    }
    if (!empty($ombuseo->meta_keywords)) {
      $meta_keywords = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'keywords',
          'content' => $ombuseo->meta_keywords,
        ),
      );
      drupal_add_html_head($meta_keywords, 'meta_keywords');
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function ombuseo_preprocess_html(&$variables) {
  $ombuseo = ombuseo_get_current_seo();
  if (!empty($ombuseo->meta_title)) {
    $variables['head_title'] =  $ombuseo->meta_title . ' | ' . variable_get('site_name', 'Drupal');
  }
}

/**
 * Implements hook_ombucore_settings_alter().
 *
 * Enable xmlsitemap for all content types.
 */
function ombuseo_ombucore_settings_alter($type, &$settings) {
  switch ($type) {
    case 'content_types':
      $settings['node_settings']['defaults']['xmlsitemap_settings_node_[type]'] = array(
        'status' => '1',
        'priority' => '0.5',
      );
      break;
  }
}

/**
 * Settings form
 */
function ombuseo_settings_form() {
  $node_types = array();
  foreach (node_type_get_types() as $type) {
    $node_types[$type->type] = $type->name;
  }
  $form['ombuseo_node_types'] = array(
    '#title' => t('Node settings'),
    '#type' => 'checkboxes',
    '#options' => $node_types,
    '#default_value' => variable_get('ombuseo_node_types', array()),
    '#description' => t('Select the node types to use OMBU SEO.')
  );

  $vocabs = array();
  foreach (taxonomy_get_vocabularies() as $vocab) {
    $vocabs[$vocab->machine_name] =$vocab->name;
  }
  $form['ombuseo_taxonomy_vocabs'] = array(
    '#title' => t('Taxonomy settings'),
    '#type' => 'checkboxes',
    '#options' => $vocabs,
    '#default_value' => variable_get('ombuseo_taxonomy_vocabs', array()),
    '#description' => t('Select the taxonomy types to use OMBU SEO.')
  );

  $views = array();
  foreach (views_get_applicable_views('uses hook menu') as $data) {
    list($view, $display_id) = $data;
    $display = $view->display[$display_id];
    $view_name = !empty($view->human_name) ? $view->human_name : $view->name;
    $display_name = isset($display->display_title) ? $display->display_title : $display->id;
    $views[$view->name . '::' . $display->id] = t('@viewname (display: %displayname, path: %path)', array('@viewname' => $view_name, '%displayname' => $display_name, '%path' => $display->display_options['path']));
  }

  $form['ombuseo_views'] = array(
    '#title' => t('Views settings'),
    '#type' => 'checkboxes',
    '#options' => $views,
    '#default_value' => variable_get('ombuseo_views', array()),
    '#description' => t('Select the views displays to use OMBU SEO.')
  );

  $form['ombuseo_path'] = array(
    '#title' => t('SEO enabled paths'),
    '#type' => 'textarea',
    '#default_value' => variable_get('ombuseo_path', ''),
    '#description' => t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
  );

  $form['#submit'][] = 'ombuseo_settings_form_menu_cache_clear';

  return system_settings_form($form);
}

/**
 * Submit handler for ombuseo_mdedata_form().
 */
function ombuseo_settings_form_menu_cache_clear() {
  menu_rebuild();
  cache_clear_all();
}

/**
 * Loads an ombuseo node row from the database
 *
 * @param $type
 *   The object type to load.
 * @param $id
 *   The object id to load.
 *
 * @return array Associative array with values, if no record was found, returns
 *   an array with empty values
 */
function ombuseo_load($type, $id) {
  $row = db_query("SELECT * FROM {ombuseo} WHERE id = :id AND type = :type", array(
    ':id' => $id,
    ':type' => $type,
  ))->fetchObject();
  if (!$row) {
    $row = (object) array(
      'meta_title' => '',
      'meta_description' => '',
      'meta_keywords' => '',
    );
  }
  return $row;
}

/**
 * Saves an ombuseo row to the database.
 *
 * @param $ombuseo Object to save
 */
function ombuseo_save(stdClass $ombuseo) {
  try {
    return db_merge('ombuseo')
      ->key(array('type' => $ombuseo->type, 'id' => $ombuseo->id))
      ->fields(array(
      'meta_title' => $ombuseo->meta_title,
      'meta_description' => $ombuseo->meta_description,
      'meta_keywords' => $ombuseo->meta_keywords,
    ))
      ->execute();
  }
  catch (Exception $e) {
    watchdog('ombuseo', 'Unable to save ombuseo record, with error: @error', array('@error' => $e->getMessage()), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Deletes an ombuseo row from the database.
 *
 * @param $type
 *   The type to delete.
 * @param $id
 *   The id to delete.
 */
function ombuseo_delete($type, $id) {
  db_delete('ombuseo')
    ->condition('type', $type)
    ->condition('id', $id)
    ->execute();
}

/**
 * Returns the path arguments for a view.
 *
 * @param $view
 *   The view object
 * @param $display
 *   The current display
 *
 * @return
 *   Array of arguments
 */
function ombuseo_get_view_arguments($view, $display) {
  $arguments = array();

  $path = $view->display[$display]->display_options['path'];
  $path = explode('/', $path);
  foreach ($path as $key => $value) {
    if ($value == '%') {
      $arguments[] = arg($key);
    }
  }

  return $arguments;
}
